<?php
  echo $this->doctype();
  $locale = $this->plugin('translate')->getTranslator()->getLocale();
?>
<html lang='<?php echo $locale?>' class='no-js'<?php if($locale == "ar_JO") echo "dir='rtl'"?>>
<head>
  <meta charset='utf-8'> <!-- Charset should be defined as early as possible to avoid rendering problems -->

  <!-- ==== DNS Prefetch ==== -->
  <link rel="dns-prefetch" href="//maps.googleapis.com">

  <!-- ==== Critical Meta Tags ==== -->
  <meta http-equiv='X-UA-Compatible' content='IE=edge,chrome=1'> <!-- This line is best to remove and just send it as a http header -->
  <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'> <!-- Required for Responsive Web Design -->
  <?php echo $this->headTitle($this->translate('MyUNHCR'))->setSeparator(' - ')->setAutoEscape(false) ?>

  <!-- ======= Critical Inline Scripts ======= -->
  <script>

    var doc = document.documentElement;
    window.app = {
      name: 'MyUNHCR', // Define a default app name (for untitled pages, etc.)
      time24h: false,
      dlog: true, // Toggle dev output logs in the console
      verbose: true, // Toggle some minor info like scroll ticks (requires dlog to be true)
      ua: navigator.userAgent.toLowerCase(),
      userDevice: '',
      userDeviceVersion: '',
      userModernFail: false,
      DOMContentLoaded: false
    };

    function supportCheck() {
      // Show javascript support
      doc.className = doc.className.replace(/\bno-js\b/,'js');

      // Test for touch support (Modernizr)
      if( ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch ) {
        doc.className += " touch";
      } else {
        doc.className += " no-touch";
      }

      // Android version detect
      if (app.ua.indexOf("android") >= 0) {
        app.userDevice = 'Android';
        app.userDeviceVersion = parseFloat(app.ua.match(/android\s([0-9\.]*)/)[1]);
        doc.className += " android";
        if( app.userDeviceVersion < 2.3 ) {
          console.log ('Failed the Android Test: ' + app.userDeviceVersion);
          app.userModernFail = true;
        }
      }

      // iOS version detect
      if ( /(iphone|ipad|ipod)/.test(app.ua) ) {
        app.userDevice = 'iOS';
        app.userDeviceVersion = parseFloat((navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/)[1]);
        doc.className += " ios";
        if( app.userDeviceVersion < 6.1 ) {
          console.log ('Failed the iOS Test: ' + app.userDeviceVersion);
          app.userModernFail = true;
        }
      }

      // Device needs to support 2D Transforms to qualify
      if ( detectCSSFeature('transform') === true ) {
        doc.className += " transforms";
      } else {
        console.log ('Failed the 2D CSS transforms test ');
        app.userModernFail = true;
      }

      // Test for ajax support
      if (typeof XMLHttpRequest !== "undefined") {
        doc.className += " ajax";
      } else {
        app.userModernFail = true;
      }

      // Show whether the device is modern after all those tests
      if ( app.userModernFail === false ) {
        doc.className += " modern";
      }
    }

    // Function for vendor feature testing
    function detectCSSFeature(featurename){
      var feature = false,
      domPrefixes = ['Webkit', 'Moz', 'ms', 'O'],
      elm = document.createElement('div'),
      featurenameCapital = null;
      featurename = featurename.toLowerCase();
      if( elm.style[featurename] !== undefined ) { feature = true; } 
      if( feature === false ) {
        featurenameCapital = featurename.charAt(0).toUpperCase() + featurename.substr(1);
        for( var i = 0; i < domPrefixes.length; i++ ) {
          if( elm.style[domPrefixes[i] + featurenameCapital ] !== undefined ) {
            feature = true;
            break;
          }
        }
      }
      return feature; 
    }

    // Log if DOMContentLoaded has fired, for scripts which load asynchronously after the event
    var logDOMContent = function() {
      document.addEventListener("DOMContentLoaded", function(){
        window.app.DOMContentLoaded = true;
        setTimeout(function(){
          doc.className += " ready";
        }, 1000); 
      });
    }

    supportCheck();
    logDOMContent();

  </script>

  <!-- ==== CSS ==== -->
  <?php
    $this->headLink()->appendStylesheet('/css/main.css');
    echo $this->headLink();
  ?>

    <!-- ==== Secondary Meta Tags ==== -->
  <meta name='description' content=''>
  
  <!-- ==== App Icons ==== -->
  <link rel='manifest' href='manifest.json'>
  <link rel='apple-touch-icon' href='/media/app-icon/ios/60.png'>
  <link rel='apple-touch-icon' sizes='76x76' href='/media/app-icon/ios/76.png'>
  <link rel='apple-touch-icon' sizes='120x120' href='/media/app-icon/ios/120.png'>
  <link rel='apple-touch-icon' sizes='152x152' href='/media/app-icon/ios/152.png'>
  <link rel='shortcut icon' sizes='192x192' href='/media/app-icon/android/192.png'>

  <!-- ==== Prefetch the next page? ==== -->
  <!-- <link rel='prefetch' href='menu-page.html'> -->
</head>
<body class="<?php echo $this->layout()->body_class; ?>">

<?php echo $this->partial('application/index/header.phtml'); ?>

<div id='page'>
  <?php echo $this->content; ?>
</div>

<?php echo $this->partial('application/index/footer.phtml'); ?>

<!-- Various helpers -->
<div id='pageLoad'></div>
<div id='screenSize'></div>
<div id='alertPolite'></div>
<div id='alertAssertive'></div>

<!-- Secondary script files (async!) -->
<!-- <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js' async defer></script> -->
<script src='scripts/external/zepto.js' async defer></script>
<!-- <script src='scripts/main.js' async defer></script> -->
<script src='scripts/all.js' async defer></script>

</body>
</html>
